#!/bin/bash
# Watch YouTube videos or Twitch videos that have been downloaded
# or stream YouTube videos or Twitch livestreams
# yt-dlp for VODS (YouTube & Twitch)
# streamlink for Twitch livestreams

VIDEO_DIR="$HOME/Videos/newsboat"

# Log everything to a file
echo "========== NEW RUN ==========" >>/tmp/mpv-yt-debug.log
echo "All args: $@" >>/tmp/mpv-yt-debug.log
echo "Arg 1: $1" >>/tmp/mpv-yt-debug.log
echo "Arg count: $#" >>/tmp/mpv-yt-debug.log
date >>/tmp/mpv-yt-debug.log

URL="$1"

# Check if it's a Twitch VOD
if [[ "$URL" =~ twitch\.tv/videos/([0-9]+) ]]; then
  TWITCH_VOD_ID="${BASH_REMATCH[1]}"
  echo "Twitch VOD ID: $TWITCH_VOD_ID" >>/tmp/mpv-yt-debug.log

  DOWNLOADED=$(find "$VIDEO_DIR" -type f -name "*${TWITCH_VOD_ID}*" 2>/dev/null | head -n 1)
  if [ -n "$DOWNLOADED" ]; then
    notify-send "MPV" "Playing downloaded VOD" -t 3000 -u low &
    exec mpv --really-quiet "$DOWNLOADED" 2>/dev/null &
    exit 0
  fi
fi

# Extract any 11-character YouTube video ID from the URL
VIDEO_ID=$(echo "$URL" | grep -oP '[a-zA-Z0-9_-]{11}' | head -n 1)

# Kill any existing mpv instances first
pkill -f "mpv.*ytdl-format" 2>/dev/null
# pkill -f "streamlink" 2>/dev/null

# Only kill streamlinks processes that are in a player currently
# this will prevent download VOD script from being killed on accident
pkill -f "streamlink.*--player" 2>/dev/null

# Check for downloaded video
if [ -n "$VIDEO_ID" ]; then
  DOWNLOADED=$(find "$VIDEO_DIR" -type f -name "*${VIDEO_ID}*" 2>/dev/null | head -n 1)

  if [ -n "$DOWNLOADED" ]; then
    notify-send "MPV" "Playing downloaded video" -t 3000 -u low &
    exec mpv --really-quiet "$DOWNLOADED" 2>/dev/null &
    exit 0
  fi
fi

# Check if it's a Twitch stream
if [[ "$URL" =~ twitch\.tv ]]; then
  notify-send "MPV" "Loading Twitch stream..." -t 3000 -u low &

  # Read OAuth token from file
  TWITCH_TOKEN=$(cat ~/.newsboat/.twitch_oauth 2>/dev/null)

  # Check if it's a VOD (contains /videos/ in URL)
  if [[ "$URL" =~ /videos/ ]]; then
    exec mpv \
      --ytdl-format='bestvideo[height<=?1080][ext=mp4]+bestaudio[ext=m4a]/best[height<=?1080][ext=mp4]/best[height<=?1080]' \
      --cache=yes \
      --demuxer-lavf-o=live_start_index=0 \
      --cache-secs=0.5 \
      --demuxer-readahead-secs=0.5 \
      --demuxer-max-bytes=25M \
      --demuxer-max-back-bytes=10M \
      --force-window=immediate \
      "$URL" >/dev/null 2>&1 &
    exit 0
  else
    # Live stream - use low latency settings
    PLAYER_ARGS="--cache=yes --force-window=immediate"
    STREAM_ARGS="--twitch-low-latency --stream-segment-threads 3 --stream-segment-attempts 3 --stream-segment-timeout 10 --retry-streams 2 --retry-open 2"
  fi

  if [ -n "$TWITCH_TOKEN" ]; then
    exec streamlink \
      --twitch-disable-ads \
      --twitch-api-header "Authorization=OAuth $TWITCH_TOKEN" \
      --player mpv \
      --player-args "$PLAYER_ARGS" \
      $STREAM_ARGS \
      "$URL" best >/dev/null 2>&1 &
  else
    # Fallback without token
    exec streamlink \
      --twitch-disable-ads \
      --player mpv \
      --player-args "$PLAYER_ARGS" \
      $STREAM_ARGS \
      "$URL" best >/dev/null 2>&1 &
  fi
else
  # YouTube and other videos
  notify-send "MPV" "Streaming video..." -t 3000 -u low &
  exec mpv \
    --ytdl-format='bestvideo[height<=?1080][ext=mp4]+bestaudio[ext=m4a]/best[height<=?1080][ext=mp4]/best[height<=?1080]' \
    --cache=yes \
    --cache-secs=0.5 \
    --demuxer-readahead-secs=0.5 \
    --demuxer-max-bytes=25M \
    --demuxer-max-back-bytes=10M \
    --force-window=immediate \
    "$URL" >/dev/null 2>&1 &
fi
